version: '3.8'

# Define the services for the application
services:
  redis:
    image: redis:alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - inpainting-network
    command: redis-server --appendonly yes
    # 
    hostname: redis

  # Service for PostgreSQL database
  postgres:
    image: postgres:alpine
    hostname: postgres
    env_file:
      - ./.env
    ports:
      - '${DB_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - inpainting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Service for the main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '${PORT}:${PORT}'
    env_file:
      - ./.env
    volumes:
      - uploads:/usr/src/app/uploads
      - static_files:/var/www/html/images
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - inpainting-network
    restart: unless-stopped

  # Service for the background worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./.env
    volumes:
      - static_files:/var/www/html/images
    command: npm run worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - inpainting-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Service for the Apache web server
  apache:
    image: httpd:2.4-alpine
    container_name: inpainting-apache
    ports:
      - "8080:80"
    volumes:
      - static_files:/usr/local/apache2/htdocs/images
      - ./apache.conf:/usr/local/apache2/conf/httpd.conf
    networks:
      - inpainting-network
    depends_on:
      - app
    restart: unless-stopped

# Define named volumes
volumes:
  uploads:
  postgres_data:
  redis_data:
  static_files:

# Define the networks
networks:
  inpainting-network:
    driver: bridge